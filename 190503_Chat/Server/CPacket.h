#pragma once

class CPacket
{
public:

	enum en_PACKET
	{
		eBUFFER_DEFAULT = 1024,		// 패킷의 기본 버퍼 사이즈.
		ePACKET_MAX_SIZE = 1024,		// 패킷의 최대 사이즈
	};

	//////////////////////////////////////////////////////////////////////////
	// 생성자, 파괴자.
	//
	// Parameters:
	// ---------------------------------------------------------
	// (int) 버퍼 사이즈.
	//	---------------------------------------------------------
	//	(const CAyaPacket &) 패킷의 복사를 위한 패킷 레퍼런스.
	// Return:
	//////////////////////////////////////////////////////////////////////////
	CPacket();
	CPacket(int iBufferSize);
	CPacket(const CPacket &clSrcPacket); // 복사생성자

	virtual	~CPacket();

protected:
	//////////////////////////////////////////////////////////////////////////
	// 패킷 초기화.
	//
	// 메모리 할당을 여기서 하므로, 함부로 호출하면 안된다. 
	//
	// Parameters: (int)BufferSize.
	// Return: 없음.
	//////////////////////////////////////////////////////////////////////////
	void	Initial(int iBufferSize = eBUFFER_DEFAULT);
	
	//////////////////////////////////////////////////////////////////////////
	// 패킷  파괴.
	//
	// Parameters: 없음.
	// Return: 없음.
	//////////////////////////////////////////////////////////////////////////
	void	Release(void);

public:
	//////////////////////////////////////////////////////////////////////////
	// 패킷 청소.
	//
	// Parameters: 없음.
	// Return: 없음.
	//////////////////////////////////////////////////////////////////////////
	void	Clear(void);


	//////////////////////////////////////////////////////////////////////////
	// 버퍼 사이즈 얻기 / Read 얻기 / Write 얻기
	//
	// Parameters: 없음.
	// Return: (int)패킷 버퍼 사이즈 얻기.
	//////////////////////////////////////////////////////////////////////////
	int		GetBufferSize(void);
	int		GetReadPos(void);
	int		GetWritePos(void);

	//////////////////////////////////////////////////////////////////////////
	// 패킷 실제 총 사이즈
	//////////////////////////////////////////////////////////////////////////
	int		GetPacketSize(void);

	//////////////////////////////////////////////////////////////////////////
	// 버퍼 남은 사이즈
	//////////////////////////////////////////////////////////////////////////
	int		GetFreeSize(void);

	//////////////////////////////////////////////////////////////////////////
	// 버퍼 포인터 얻기.
	//
	// 
	//
	// Parameters: 없음.
	// Return: (char *)버퍼 포인터.
	//////////////////////////////////////////////////////////////////////////
	char	*GetBufferPtr(void);

	//////////////////////////////////////////////////////////////////////////
	// Read 포인터 얻기.
	//
	// 
	//
	// Parameters: 없음.
	// Return: (char *)버퍼 포인터.
	//////////////////////////////////////////////////////////////////////////
	char	*GetReadPtr(void);

	//////////////////////////////////////////////////////////////////////////
	// Write 포인터 얻기.
	//
	// 
	//
	// Parameters: 없음.
	// Return: (char *)버퍼 포인터.
	//////////////////////////////////////////////////////////////////////////
	char	*GetWritePtr(void);

	//////////////////////////////////////////////////////////////////////////
	// 버퍼 Pos 이동. (음수이동은 안됨)
	// GetBufferPtr 함수를 이용하여 외부에서 강제로 버퍼 내용을 수정할 경우 사용. 
	//
	// Parameters: (int) 이동 사이즈.
	// Return: (int) 이동된 사이즈.
	//////////////////////////////////////////////////////////////////////////
	int		MoveWritePos(int iSize);
	int		MoveReadPos(int iSize);

	/*================================================= */
	// 연산자 오퍼레이터.
	/*================================================= */
	// 대입 연산자 =
	CPacket &operator = (const CPacket &Pack);

	//////////////////////////////////////////////////////////////////////////
	// 넣기.	각 변수 타입마다 모두 제작
	//////////////////////////////////////////////////////////////////////////
	//<<
	CPacket &operator << (bool	blVal);
	CPacket &operator << (char	chVal);
	CPacket &operator << (short	shVal);
	CPacket &operator << (int	iVal);
	CPacket &operator << (long	lgVal);
	CPacket &operator << (float	fVal);
	CPacket &operator << (double dVal);
	//CPacket &operator << (__int8 i8Val);
	//CPacket &operator << (__int16 i16Val);
	//CPacket &operator << (__int32 i32Val);
	CPacket &operator << (__int64 i64Val);
	CPacket &operator << (unsigned char		uchVal);
	CPacket &operator << (unsigned short	ushVal);
	CPacket &operator << (unsigned int		uiVal);
	CPacket &operator << (unsigned long		ulgVal);

	//////////////////////////////////////////////////////////////////////////
	// 빼기.	각 변수 타입마다 모두 제작
	//////////////////////////////////////////////////////////////////////////
	//>>
	CPacket &operator >> (bool	&blVal);
	CPacket &operator >> (char	&chVal);
	CPacket &operator >> (short	&shVal);
	CPacket &operator >> (int	&iVal);
	CPacket &operator >> (long	&lgVal);
	CPacket &operator >> (float	&fVal);
	CPacket &operator >> (double &dVal);
	//CPacket &operator >> (__int8 &i8Val);
	//CPacket &operator >> (__int16 &i16Val);
	//CPacket &operator >> (__int32 &i32Val);
	CPacket &operator >> (__int64 &i64Val);
	CPacket &operator >> (unsigned char		&uchVal);
	CPacket &operator >> (unsigned short	&ushVal);
	CPacket &operator >> (unsigned int		&uiVal);
	CPacket &operator >> (unsigned long		&ulgVal);

	//////////////////////////////////////////////////////////////////////////
	// 데이타 얻기.
	//
	// Parameters: (char *)Dest 포인터. (int)Size.
	// Return: (int)복사한 사이즈.
	//////////////////////////////////////////////////////////////////////////
	int		Enqueue(char *chpDest, int iSize);

	//////////////////////////////////////////////////////////////////////////
	// 데이타 삽입.
	//
	// Parameters: (char *)Src 포인터. (int)SrcSize.
	// Return: (int)복사한 사이즈.
	//////////////////////////////////////////////////////////////////////////
	int		Dequeue(char *chpSrc, int iSrcSize);

	void	PrintPacket(bool isHex, int iSize);

private:
	char *_Buffer;
	
	int _BufSize;
	int _Write;
	int _Read;
};
